<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
         xmlns = "http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation = "http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version = "2.5">

    <display-name>Archetype Created Web Application</display-name>

    <welcome-file-list>
        <welcome-file>user.html</welcome-file>
    </welcome-file-list>

    <!--
        业务层和持久层的配置文件
        支持多个 classpath:/applicationContext.xml,classpath:/applicationContext1.xml
     -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <!-- 通过contextConfigLocation 所指定的Spring 配置文件启动业务层的Spring 容器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
        声明DispatcherServlet
        默认加载WEB-INF/springmvc-servlet.xml 的Spring 配置文件，启动Web 层Spring 容器
     -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- 匹配的url 模式 -->
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--
        1.Spring 容器之间可以设置父子级关系，实现良好的解耦。这里Web 层Spring 容器将作为业务层Spring 容器的自容器，
        即Web 层容器可以引用业务层容器的Bean吗，而业务层却访问不到Web 层。
        2.一个Web.xml 可以配置多个DispatcherServlet ，每个DispatcherServlet 处理不同的请求
    -->

</web-app>
